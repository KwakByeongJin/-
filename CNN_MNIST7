{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO4lZ0drhcJdsgnNVJAsvGI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KwakByeongJin/-/blob/main/CNN_MNIST7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 822
        },
        "id": "6Vo-en18KHxr",
        "outputId": "465b0d99-75f7-4d42-b9fd-0a0cf2e3dae6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m844/844\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 58ms/step - accuracy: 0.9668 - loss: 0.0986 - val_accuracy: 0.9967 - val_loss: 0.0110\n",
            "Epoch 2/5\n",
            "\u001b[1m844/844\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 59ms/step - accuracy: 0.9949 - loss: 0.0157 - val_accuracy: 0.9985 - val_loss: 0.0056\n",
            "Epoch 3/5\n",
            "\u001b[1m844/844\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 57ms/step - accuracy: 0.9969 - loss: 0.0089 - val_accuracy: 0.9985 - val_loss: 0.0050\n",
            "Epoch 4/5\n",
            "\u001b[1m844/844\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 59ms/step - accuracy: 0.9974 - loss: 0.0070 - val_accuracy: 0.9983 - val_loss: 0.0065\n",
            "Epoch 5/5\n",
            "\u001b[1m844/844\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 58ms/step - accuracy: 0.9982 - loss: 0.0053 - val_accuracy: 0.9982 - val_loss: 0.0057\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 13ms/step - accuracy: 0.9955 - loss: 0.0138\n",
            "테스트 손실: 0.009283815510571003\n",
            "테스트 정확도: 0.996999979019165\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 9ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-dcc009092a7b>:52: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  plt.title(f'예측: {int(predictions[i] > 0.5)} (실제: {y_test[i]})')\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50696 (\\N{HANGUL SYLLABLE YE}) missing from current font.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52769 (\\N{HANGUL SYLLABLE CEUG}) missing from current font.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49892 (\\N{HANGUL SYLLABLE SIL}) missing from current font.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51228 (\\N{HANGUL SYLLABLE JE}) missing from current font.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 필요한 라이브러리 불러오기\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "# MNIST 데이터셋 로드\n",
        "mnist = keras.datasets.mnist\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "\n",
        "# 데이터 전처리\n",
        "x_train = x_train.reshape((60000, 28, 28, 1)).astype('float32') / 255\n",
        "x_test = x_test.reshape((10000, 28, 28, 1)).astype('float32') / 255\n",
        "\n",
        "# 레이블을 0과 1로 변환 (7이면 1, 아니면 0)\n",
        "y_train = (y_train == 7).astype(int)\n",
        "y_test = (y_test == 7).astype(int)\n",
        "\n",
        "# CNN 모델 구축\n",
        "model = keras.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(1, activation='sigmoid')  # 이진 분류이므로 sigmoid 사용\n",
        "])\n",
        "\n",
        "# 모델 컴파일\n",
        "model.compile(optimizer='adam',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# 모델 학습\n",
        "model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.1)\n",
        "\n",
        "# 테스트 데이터로 모델 평가\n",
        "test_loss, test_acc = model.evaluate(x_test, y_test)\n",
        "print('테스트 손실:', test_loss)\n",
        "print('테스트 정확도:', test_acc)\n",
        "\n",
        "# 예측 결과 확인\n",
        "predictions = model.predict(x_test)\n",
        "\n",
        "# 첫 번째 10개 테스트 이미지를 출력\n",
        "plt.figure(figsize=(10, 10))\n",
        "for i in range(10):\n",
        "    plt.subplot(5, 5, i + 1)\n",
        "    plt.imshow(x_test[i].reshape(28, 28), cmap='gray')\n",
        "    plt.title(f'예측: {int(predictions[i] > 0.5)} (실제: {y_test[i]})')\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "source": [
        "# 필요한 라이브러리 불러오기\n",
        "import numpy as np  # 수치 계산을 위한 NumPy 라이브러리\n",
        "import matplotlib.pyplot as plt  # 그래프를 그리기 위한 Matplotlib 라이브러리\n",
        "from tensorflow import keras  # 딥러닝 모델을 만들기 위한 Keras 라이브러리\n",
        "from tensorflow.keras import layers  # Keras의 레이어들을 사용하기 위한 import\n",
        "\n",
        "# MNIST 데이터셋 로드\n",
        "mnist = keras.datasets.mnist  # MNIST 데이터셋을 불러오기 위한 객체\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()  # MNIST 데이터셋을 훈련 데이터와 테스트 데이터로 나누어 로드\n",
        "\n",
        "# 데이터 전처리\n",
        "x_train = x_train.reshape((60000, 28, 28, 1)).astype('float32') / 255  # 훈련 이미지 데이터를 CNN 모델에 입력하기 위한 형태로 변환 (60000개 이미지, 28x28 픽셀, 흑백 채널) 및 0~1 사이 값으로 정규화\n",
        "x_test = x_test.reshape((10000, 28, 28, 1)).astype('float32') / 255  # 테스트 이미지 데이터도 동일하게 변환 (10000개 이미지)\n",
        "\n",
        "# 레이블을 0과 1로 변환 (7이면 1, 아니면 0)\n",
        "y_train = (y_train == 7).astype(int)  # 훈련 데이터의 레이블을 7이면 1, 아니면 0으로 변환 (이진 분류 문제로 만들기 위함)\n",
        "y_test = (y_test == 7).astype(int)  # 테스트 데이터의 레이블도 동일하게 변환\n",
        "\n",
        "# CNN 모델 구축\n",
        "model = keras.Sequential([  # 순차적으로 레이어를 쌓아서 모델을 만드는 Sequential API 사용\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),  # 첫 번째 합성곱 레이어 (32개 필터, 3x3 커널, ReLU 활성화 함수, 입력 형태 지정)\n",
        "    layers.MaxPooling2D((2, 2)),  # 첫 번째 최대 풀링 레이어 (2x2 풀링)\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),  # 두 번째 합성곱 레이어 (64개 필터)\n",
        "    layers.MaxPooling2D((2, 2)),  # 두 번째 최대 풀링 레이어\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),  # 세 번째 합성곱 레이어\n",
        "    layers.Flatten(),  # 합성곱 레이어의 출력을 1차원으로 펼침\n",
        "    layers.Dense(64, activation='relu'),  # 첫 번째 완전 연결 레이어 (64개 뉴런, ReLU 활성화 함수)\n",
        "    layers.Dense(1, activation='sigmoid')  # 두 번째 완전 연결 레이어 (1개 뉴런, sigmoid 활성화 함수 - 이진 분류에 적합)\n",
        "])\n",
        "\n",
        "# 모델 컴파일\n",
        "model.compile(optimizer='adam',  # Adam 옵티마이저 사용 (학습률 자동 조정)\n",
        "              loss='binary_crossentropy',  # 이진 분류 문제에 적합한 손실 함수\n",
        "              metrics=['accuracy'])  # 정확도를 평가 지표로 사용\n",
        "\n",
        "# 모델 학습\n",
        "model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.1)  # 훈련 데이터로 모델 학습 (5 에포크, 배치 크기 64, 훈련 데이터의 10%를 검증 데이터로 사용)\n",
        "\n",
        "# 테스트 데이터로 모델 평가\n",
        "test_loss, test_acc = model.evaluate(x_test, y_test)  # 테스트 데이터로 모델 성능 평가\n",
        "print('테스트 손실:', test_loss)  # 테스트 손실 출력\n",
        "print('테스트 정확도:', test_acc)  # 테"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "veUBgA-ASp3a"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}